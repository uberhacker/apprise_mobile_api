<?php
/**
 * Content
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * APPrise Mobile API
 *
 * API for APPrise Mobile Clients
 *
 * OpenAPI spec version: 2.0.0
 * Contact: customercare@apprise-mobile.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Content Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Content implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Content';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
      protected static $swaggerTypes = [
          '_id' => 'string',
          'owner' => 'string',
          'account' => 'string',
          'title' => 'string',
          'publish_date' => '\DateTime',
          'web_url' => 'string',
          's3_key' => 'string',
          'created' => '\DateTime',
          'modified' => '\DateTime',
          'modified_by' => 'string',
          'share' => 'string',
          'post_date' => '\DateTime',
          'unpost_date' => '\DateTime',
          'notes_enabled' => 'bool',
          'notify' => 'bool',
          'cacheable' => 'bool',
          'content_type' => 'string',
          'total_likes' => 'int',
          'total_comments' => 'int',
          'total_views' => 'int',
          'secure' => 'bool',
          'include_in_feed' => 'bool',
          'access_groups' => 'string[]',
          'content_folder' => 'string',
          'integration_id' => 'string',
          'integration_type' => 'string',
          'permissions' => '\Swagger\Client\Model\CalendarPropertiesPermissions',
          'hls_video_playlist_url' => '\Swagger\Client\Model\ContentPropertiesWebUrl',
          'transcode_video_status' => 'string',
          'thumbnail_s3_key' => 'string',
          'small_thumbnail_url' => '\Swagger\Client\Model\ContentPropertiesWebUrl',
          'medium_thumbnail_url' => '\Swagger\Client\Model\ContentPropertiesWebUrl',
          'large_thumbnail_url' => '\Swagger\Client\Model\ContentPropertiesWebUrl',
          'xlarge_thumbnail_url' => '\Swagger\Client\Model\ContentPropertiesWebUrl',
          'thumbnail_job_id' => 'string',
          'thumbnail_job_status' => 'string',
          'display_thumbnail' => 'bool'
      ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'owner' => 'owner',
        'account' => 'account',
        'title' => 'title',
        'publish_date' => 'publishDate',
        'web_url' => 'webUrl',
        's3_key' => 's3Key',
        'created' => 'created',
        'modified' => 'modified',
        'modified_by' => 'modifiedBy',
        'share' => 'share',
        'post_date' => 'postDate',
        'unpost_date' => 'unpostDate',
        'notes_enabled' => 'notesEnabled',
        'notify' => 'notify',
        'cacheable' => 'cacheable',
        'content_type' => 'contentType',
        'total_likes' => 'totalLikes',
        'total_comments' => 'totalComments',
        'total_views' => 'totalViews',
        'secure' => 'secure',
        'include_in_feed' => 'includeInFeed',
        'access_groups' => 'accessGroups',
        'content_folder' => 'contentFolder',
        'integration_id' => 'integrationId',
        'integration_type' => 'integrationType',
        'permissions' => 'permissions',
        'hls_video_playlist_url' => 'hlsVideoPlaylistUrl',
        'transcode_video_status' => 'transcodeVideoStatus',
        'thumbnail_s3_key' => 'thumbnailS3Key',
        'small_thumbnail_url' => 'smallThumbnailUrl',
        'medium_thumbnail_url' => 'mediumThumbnailUrl',
        'large_thumbnail_url' => 'largeThumbnailUrl',
        'xlarge_thumbnail_url' => 'xlargeThumbnailUrl',
        'thumbnail_job_id' => 'thumbnailJobId',
        'thumbnail_job_status' => 'thumbnailJobStatus',
        'display_thumbnail' => 'displayThumbnail'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'owner' => 'setOwner',
        'account' => 'setAccount',
        'title' => 'setTitle',
        'publish_date' => 'setPublishDate',
        'web_url' => 'setWebUrl',
        's3_key' => 'setS3Key',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'modified_by' => 'setModifiedBy',
        'share' => 'setShare',
        'post_date' => 'setPostDate',
        'unpost_date' => 'setUnpostDate',
        'notes_enabled' => 'setNotesEnabled',
        'notify' => 'setNotify',
        'cacheable' => 'setCacheable',
        'content_type' => 'setContentType',
        'total_likes' => 'setTotalLikes',
        'total_comments' => 'setTotalComments',
        'total_views' => 'setTotalViews',
        'secure' => 'setSecure',
        'include_in_feed' => 'setIncludeInFeed',
        'access_groups' => 'setAccessGroups',
        'content_folder' => 'setContentFolder',
        'integration_id' => 'setIntegrationId',
        'integration_type' => 'setIntegrationType',
        'permissions' => 'setPermissions',
        'hls_video_playlist_url' => 'setHlsVideoPlaylistUrl',
        'transcode_video_status' => 'setTranscodeVideoStatus',
        'thumbnail_s3_key' => 'setThumbnailS3Key',
        'small_thumbnail_url' => 'setSmallThumbnailUrl',
        'medium_thumbnail_url' => 'setMediumThumbnailUrl',
        'large_thumbnail_url' => 'setLargeThumbnailUrl',
        'xlarge_thumbnail_url' => 'setXlargeThumbnailUrl',
        'thumbnail_job_id' => 'setThumbnailJobId',
        'thumbnail_job_status' => 'setThumbnailJobStatus',
        'display_thumbnail' => 'setDisplayThumbnail'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'owner' => 'getOwner',
        'account' => 'getAccount',
        'title' => 'getTitle',
        'publish_date' => 'getPublishDate',
        'web_url' => 'getWebUrl',
        's3_key' => 'getS3Key',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'modified_by' => 'getModifiedBy',
        'share' => 'getShare',
        'post_date' => 'getPostDate',
        'unpost_date' => 'getUnpostDate',
        'notes_enabled' => 'getNotesEnabled',
        'notify' => 'getNotify',
        'cacheable' => 'getCacheable',
        'content_type' => 'getContentType',
        'total_likes' => 'getTotalLikes',
        'total_comments' => 'getTotalComments',
        'total_views' => 'getTotalViews',
        'secure' => 'getSecure',
        'include_in_feed' => 'getIncludeInFeed',
        'access_groups' => 'getAccessGroups',
        'content_folder' => 'getContentFolder',
        'integration_id' => 'getIntegrationId',
        'integration_type' => 'getIntegrationType',
        'permissions' => 'getPermissions',
        'hls_video_playlist_url' => 'getHlsVideoPlaylistUrl',
        'transcode_video_status' => 'getTranscodeVideoStatus',
        'thumbnail_s3_key' => 'getThumbnailS3Key',
        'small_thumbnail_url' => 'getSmallThumbnailUrl',
        'medium_thumbnail_url' => 'getMediumThumbnailUrl',
        'large_thumbnail_url' => 'getLargeThumbnailUrl',
        'xlarge_thumbnail_url' => 'getXlargeThumbnailUrl',
        'thumbnail_job_id' => 'getThumbnailJobId',
        'thumbnail_job_status' => 'getThumbnailJobStatus',
        'display_thumbnail' => 'getDisplayThumbnail'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SHARE_ENABLED = 'SHARE_ENABLED';
    const SHARE_EMAIL_ONLY = 'SHARE_EMAIL_ONLY';
    const SHARE_DISABLED = 'SHARE_DISABLED';
    const CONTENT_TYPE_WEB = 'CONTENT_WEB';
    const CONTENT_TYPE_PDF = 'CONTENT_PDF';
    const CONTENT_TYPE_VIDEO = 'CONTENT_VIDEO';
    const CONTENT_TYPE_AUDIO = 'CONTENT_AUDIO';
    const CONTENT_TYPE_IMAGE = 'CONTENT_IMAGE';
    const CONTENT_TYPE_RICH_TEXT = 'CONTENT_RICH_TEXT';
    const TRANSCODE_VIDEO_STATUS_QUEUED = 'QUEUED';
    const TRANSCODE_VIDEO_STATUS_PROCESSING = 'PROCESSING';
    const TRANSCODE_VIDEO_STATUS_COMPLETED = 'COMPLETED';
    const TRANSCODE_VIDEO_STATUS_FAILED = 'FAILED';
    const TRANSCODE_VIDEO_STATUS_NONE = 'NONE';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getShareAllowableValues()
    {
        return [
            self::SHARE_ENABLED,
            self::SHARE_EMAIL_ONLY,
            self::SHARE_DISABLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getContentTypeAllowableValues()
    {
        return [
            self::CONTENT_TYPE_WEB,
            self::CONTENT_TYPE_PDF,
            self::CONTENT_TYPE_VIDEO,
            self::CONTENT_TYPE_AUDIO,
            self::CONTENT_TYPE_IMAGE,
            self::CONTENT_TYPE_RICH_TEXT,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTranscodeVideoStatusAllowableValues()
    {
        return [
            self::TRANSCODE_VIDEO_STATUS_QUEUED,
            self::TRANSCODE_VIDEO_STATUS_PROCESSING,
            self::TRANSCODE_VIDEO_STATUS_COMPLETED,
            self::TRANSCODE_VIDEO_STATUS_FAILED,
            self::TRANSCODE_VIDEO_STATUS_NONE,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['publish_date'] = isset($data['publish_date']) ? $data['publish_date'] : null;
        $this->container['web_url'] = isset($data['web_url']) ? $data['web_url'] : null;
        $this->container['s3_key'] = isset($data['s3_key']) ? $data['s3_key'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['modified_by'] = isset($data['modified_by']) ? $data['modified_by'] : null;
        $this->container['share'] = isset($data['share']) ? $data['share'] : null;
        $this->container['post_date'] = isset($data['post_date']) ? $data['post_date'] : null;
        $this->container['unpost_date'] = isset($data['unpost_date']) ? $data['unpost_date'] : null;
        $this->container['notes_enabled'] = isset($data['notes_enabled']) ? $data['notes_enabled'] : null;
        $this->container['notify'] = isset($data['notify']) ? $data['notify'] : null;
        $this->container['cacheable'] = isset($data['cacheable']) ? $data['cacheable'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['total_likes'] = isset($data['total_likes']) ? $data['total_likes'] : null;
        $this->container['total_comments'] = isset($data['total_comments']) ? $data['total_comments'] : null;
        $this->container['total_views'] = isset($data['total_views']) ? $data['total_views'] : null;
        $this->container['secure'] = isset($data['secure']) ? $data['secure'] : null;
        $this->container['include_in_feed'] = isset($data['include_in_feed']) ? $data['include_in_feed'] : null;
        $this->container['access_groups'] = isset($data['access_groups']) ? $data['access_groups'] : null;
        $this->container['content_folder'] = isset($data['content_folder']) ? $data['content_folder'] : null;
        $this->container['integration_id'] = isset($data['integration_id']) ? $data['integration_id'] : null;
        $this->container['integration_type'] = isset($data['integration_type']) ? $data['integration_type'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['hls_video_playlist_url'] = isset($data['hls_video_playlist_url']) ? $data['hls_video_playlist_url'] : null;
        $this->container['transcode_video_status'] = isset($data['transcode_video_status']) ? $data['transcode_video_status'] : null;
        $this->container['thumbnail_s3_key'] = isset($data['thumbnail_s3_key']) ? $data['thumbnail_s3_key'] : null;
        $this->container['small_thumbnail_url'] = isset($data['small_thumbnail_url']) ? $data['small_thumbnail_url'] : null;
        $this->container['medium_thumbnail_url'] = isset($data['medium_thumbnail_url']) ? $data['medium_thumbnail_url'] : null;
        $this->container['large_thumbnail_url'] = isset($data['large_thumbnail_url']) ? $data['large_thumbnail_url'] : null;
        $this->container['xlarge_thumbnail_url'] = isset($data['xlarge_thumbnail_url']) ? $data['xlarge_thumbnail_url'] : null;
        $this->container['thumbnail_job_id'] = isset($data['thumbnail_job_id']) ? $data['thumbnail_job_id'] : null;
        $this->container['thumbnail_job_status'] = isset($data['thumbnail_job_status']) ? $data['thumbnail_job_status'] : null;
        $this->container['display_thumbnail'] = isset($data['display_thumbnail']) ? $data['display_thumbnail'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['_id'] === null) {
            $invalid_properties[] = "'_id' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalid_properties[] = "'owner' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalid_properties[] = "'account' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalid_properties[] = "'title' can't be null";
        }
        if (!is_null($this->container['web_url']) && !preg_match("/(http|ftp|https)://[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/~+#-])?/", $this->container['web_url'])) {
            $invalid_properties[] = "invalid value for 'web_url', must be conform to the pattern /(http|ftp|https)://[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/~+#-])?/.";
        }

        if ($this->container['created'] === null) {
            $invalid_properties[] = "'created' can't be null";
        }
        $allowed_values = $this->getShareAllowableValues();
        if (!in_array($this->container['share'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'share', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getContentTypeAllowableValues();
        if (!in_array($this->container['content_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'content_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['content_folder'] === null) {
            $invalid_properties[] = "'content_folder' can't be null";
        }
        $allowed_values = $this->getTranscodeVideoStatusAllowableValues();
        if (!in_array($this->container['transcode_video_status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'transcode_video_status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['_id'] === null) {
            return false;
        }
        if ($this->container['owner'] === null) {
            return false;
        }
        if ($this->container['account'] === null) {
            return false;
        }
        if ($this->container['title'] === null) {
            return false;
        }
        if (!preg_match("/(http|ftp|https)://[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/~+#-])?/", $this->container['web_url'])) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        $allowed_values = $this->getShareAllowableValues();
        if (!in_array($this->container['share'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getContentTypeAllowableValues();
        if (!in_array($this->container['content_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['content_folder'] === null) {
            return false;
        }
        $allowed_values = $this->getTranscodeVideoStatusAllowableValues();
        if (!in_array($this->container['transcode_video_status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets _id
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param \Swagger\Client\Model\CalendarPropertiesId $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets owner
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param \Swagger\Client\Model\CalendarPropertiesId $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets account
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     * @param \Swagger\Client\Model\CalendarPropertiesId $account
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets publish_date
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getPublishDate()
    {
        return $this->container['publish_date'];
    }

    /**
     * Sets publish_date
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $publish_date
     * @return $this
     */
    public function setPublishDate($publish_date)
    {
        $this->container['publish_date'] = $publish_date;

        return $this;
    }

    /**
     * Gets web_url
     * @return string
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     * @param string $web_url
     * @return $this
     */
    public function setWebUrl($web_url)
    {

        if (!is_null($web_url) && (!preg_match("/(http|ftp|https):\/\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\/~+#-]*[\\w@?^=%&amp;\/~+#-])?/", $web_url))) {
            throw new \InvalidArgumentException("invalid value for $web_url when calling Content., must conform to the pattern /(http|ftp|https)://[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/~+#-])?/.");
        }

        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets s3_key
     * @return string
     */
    public function getS3Key()
    {
        return $this->container['s3_key'];
    }

    /**
     * Sets s3_key
     * @param string $s3_key
     * @return $this
     */
    public function setS3Key($s3_key)
    {
        $this->container['s3_key'] = $s3_key;

        return $this;
    }

    /**
     * Gets created
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $modified
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets modified_by
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     * @param \Swagger\Client\Model\CalendarPropertiesId $modified_by
     * @return $this
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets share
     * @return string
     */
    public function getShare()
    {
        return $this->container['share'];
    }

    /**
     * Sets share
     * @param string $share
     * @return $this
     */
    public function setShare($share)
    {
        $allowed_values = $this->getShareAllowableValues();
        if (!is_null($share) && !in_array($share, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'share', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['share'] = $share;

        return $this;
    }

    /**
     * Gets post_date
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getPostDate()
    {
        return $this->container['post_date'];
    }

    /**
     * Sets post_date
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $post_date
     * @return $this
     */
    public function setPostDate($post_date)
    {
        $this->container['post_date'] = $post_date;

        return $this;
    }

    /**
     * Gets unpost_date
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getUnpostDate()
    {
        return $this->container['unpost_date'];
    }

    /**
     * Sets unpost_date
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $unpost_date
     * @return $this
     */
    public function setUnpostDate($unpost_date)
    {
        $this->container['unpost_date'] = $unpost_date;

        return $this;
    }

    /**
     * Gets notes_enabled
     * @return bool
     */
    public function getNotesEnabled()
    {
        return $this->container['notes_enabled'];
    }

    /**
     * Sets notes_enabled
     * @param bool $notes_enabled
     * @return $this
     */
    public function setNotesEnabled($notes_enabled)
    {
        $this->container['notes_enabled'] = $notes_enabled;

        return $this;
    }

    /**
     * Gets notify
     * @return bool
     */
    public function getNotify()
    {
        return $this->container['notify'];
    }

    /**
     * Sets notify
     * @param bool $notify
     * @return $this
     */
    public function setNotify($notify)
    {
        $this->container['notify'] = $notify;

        return $this;
    }

    /**
     * Gets cacheable
     * @return bool
     */
    public function getCacheable()
    {
        return $this->container['cacheable'];
    }

    /**
     * Sets cacheable
     * @param bool $cacheable
     * @return $this
     */
    public function setCacheable($cacheable)
    {
        $this->container['cacheable'] = $cacheable;

        return $this;
    }

    /**
     * Gets content_type
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     * @param string $content_type
     * @return $this
     */
    public function setContentType($content_type)
    {
        $allowed_values = $this->getContentTypeAllowableValues();
        if (!is_null($content_type) && !in_array($content_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'content_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets total_likes
     * @return int
     */
    public function getTotalLikes()
    {
        return $this->container['total_likes'];
    }

    /**
     * Sets total_likes
     * @param int $total_likes
     * @return $this
     */
    public function setTotalLikes($total_likes)
    {
        $this->container['total_likes'] = $total_likes;

        return $this;
    }

    /**
     * Gets total_comments
     * @return int
     */
    public function getTotalComments()
    {
        return $this->container['total_comments'];
    }

    /**
     * Sets total_comments
     * @param int $total_comments
     * @return $this
     */
    public function setTotalComments($total_comments)
    {
        $this->container['total_comments'] = $total_comments;

        return $this;
    }

    /**
     * Gets total_views
     * @return int
     */
    public function getTotalViews()
    {
        return $this->container['total_views'];
    }

    /**
     * Sets total_views
     * @param int $total_views
     * @return $this
     */
    public function setTotalViews($total_views)
    {
        $this->container['total_views'] = $total_views;

        return $this;
    }

    /**
     * Gets secure
     * @return bool
     */
    public function getSecure()
    {
        return $this->container['secure'];
    }

    /**
     * Sets secure
     * @param bool $secure
     * @return $this
     */
    public function setSecure($secure)
    {
        $this->container['secure'] = $secure;

        return $this;
    }

    /**
     * Gets include_in_feed
     * @return bool
     */
    public function getIncludeInFeed()
    {
        return $this->container['include_in_feed'];
    }

    /**
     * Sets include_in_feed
     * @param bool $include_in_feed
     * @return $this
     */
    public function setIncludeInFeed($include_in_feed)
    {
        $this->container['include_in_feed'] = $include_in_feed;

        return $this;
    }

    /**
     * Gets access_groups
     * @return \Swagger\Client\Model\CalendarPropertiesId[]
     */
    public function getAccessGroups()
    {
        return $this->container['access_groups'];
    }

    /**
     * Sets access_groups
     * @param \Swagger\Client\Model\CalendarPropertiesId[] $access_groups
     * @return $this
     */
    public function setAccessGroups($access_groups)
    {
        $this->container['access_groups'] = $access_groups;

        return $this;
    }

    /**
     * Gets content_folder
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getContentFolder()
    {
        return $this->container['content_folder'];
    }

    /**
     * Sets content_folder
     * @param \Swagger\Client\Model\CalendarPropertiesId $content_folder
     * @return $this
     */
    public function setContentFolder($content_folder)
    {
        $this->container['content_folder'] = $content_folder;

        return $this;
    }

    /**
     * Gets integration_id
     * @return string
     */
    public function getIntegrationId()
    {
        return $this->container['integration_id'];
    }

    /**
     * Sets integration_id
     * @param string $integration_id
     * @return $this
     */
    public function setIntegrationId($integration_id)
    {
        $this->container['integration_id'] = $integration_id;

        return $this;
    }

    /**
     * Gets integration_type
     * @return string
     */
    public function getIntegrationType()
    {
        return $this->container['integration_type'];
    }

    /**
     * Sets integration_type
     * @param string $integration_type
     * @return $this
     */
    public function setIntegrationType($integration_type)
    {
        $this->container['integration_type'] = $integration_type;

        return $this;
    }

    /**
     * Gets permissions
     * @return \Swagger\Client\Model\CalendarPropertiesPermissions
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     * @param \Swagger\Client\Model\CalendarPropertiesPermissions $permissions
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets hls_video_playlist_url
     * @return \Swagger\Client\Model\ContentPropertiesWebUrl
     */
    public function getHlsVideoPlaylistUrl()
    {
        return $this->container['hls_video_playlist_url'];
    }

    /**
     * Sets hls_video_playlist_url
     * @param \Swagger\Client\Model\ContentPropertiesWebUrl $hls_video_playlist_url
     * @return $this
     */
    public function setHlsVideoPlaylistUrl($hls_video_playlist_url)
    {
        $this->container['hls_video_playlist_url'] = $hls_video_playlist_url;

        return $this;
    }

    /**
     * Gets transcode_video_status
     * @return string
     */
    public function getTranscodeVideoStatus()
    {
        return $this->container['transcode_video_status'];
    }

    /**
     * Sets transcode_video_status
     * @param string $transcode_video_status
     * @return $this
     */
    public function setTranscodeVideoStatus($transcode_video_status)
    {
        $allowed_values = $this->getTranscodeVideoStatusAllowableValues();
        if (!is_null($transcode_video_status) && !in_array($transcode_video_status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transcode_video_status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['transcode_video_status'] = $transcode_video_status;

        return $this;
    }

    /**
     * Gets thumbnail_s3_key
     * @return string
     */
    public function getThumbnailS3Key()
    {
        return $this->container['thumbnail_s3_key'];
    }

    /**
     * Sets thumbnail_s3_key
     * @param string $thumbnail_s3_key
     * @return $this
     */
    public function setThumbnailS3Key($thumbnail_s3_key)
    {
        $this->container['thumbnail_s3_key'] = $thumbnail_s3_key;

        return $this;
    }

    /**
     * Gets small_thumbnail_url
     * @return \Swagger\Client\Model\ContentPropertiesWebUrl
     */
    public function getSmallThumbnailUrl()
    {
        return $this->container['small_thumbnail_url'];
    }

    /**
     * Sets small_thumbnail_url
     * @param \Swagger\Client\Model\ContentPropertiesWebUrl $small_thumbnail_url
     * @return $this
     */
    public function setSmallThumbnailUrl($small_thumbnail_url)
    {
        $this->container['small_thumbnail_url'] = $small_thumbnail_url;

        return $this;
    }

    /**
     * Gets medium_thumbnail_url
     * @return \Swagger\Client\Model\ContentPropertiesWebUrl
     */
    public function getMediumThumbnailUrl()
    {
        return $this->container['medium_thumbnail_url'];
    }

    /**
     * Sets medium_thumbnail_url
     * @param \Swagger\Client\Model\ContentPropertiesWebUrl $medium_thumbnail_url
     * @return $this
     */
    public function setMediumThumbnailUrl($medium_thumbnail_url)
    {
        $this->container['medium_thumbnail_url'] = $medium_thumbnail_url;

        return $this;
    }

    /**
     * Gets large_thumbnail_url
     * @return \Swagger\Client\Model\ContentPropertiesWebUrl
     */
    public function getLargeThumbnailUrl()
    {
        return $this->container['large_thumbnail_url'];
    }

    /**
     * Sets large_thumbnail_url
     * @param \Swagger\Client\Model\ContentPropertiesWebUrl $large_thumbnail_url
     * @return $this
     */
    public function setLargeThumbnailUrl($large_thumbnail_url)
    {
        $this->container['large_thumbnail_url'] = $large_thumbnail_url;

        return $this;
    }

    /**
     * Gets xlarge_thumbnail_url
     * @return \Swagger\Client\Model\ContentPropertiesWebUrl
     */
    public function getXlargeThumbnailUrl()
    {
        return $this->container['xlarge_thumbnail_url'];
    }

    /**
     * Sets xlarge_thumbnail_url
     * @param \Swagger\Client\Model\ContentPropertiesWebUrl $xlarge_thumbnail_url
     * @return $this
     */
    public function setXlargeThumbnailUrl($xlarge_thumbnail_url)
    {
        $this->container['xlarge_thumbnail_url'] = $xlarge_thumbnail_url;

        return $this;
    }

    /**
     * Gets thumbnail_job_id
     * @return string
     */
    public function getThumbnailJobId()
    {
        return $this->container['thumbnail_job_id'];
    }

    /**
     * Sets thumbnail_job_id
     * @param string $thumbnail_job_id
     * @return $this
     */
    public function setThumbnailJobId($thumbnail_job_id)
    {
        $this->container['thumbnail_job_id'] = $thumbnail_job_id;

        return $this;
    }

    /**
     * Gets thumbnail_job_status
     * @return \Swagger\Client\Model\ContentPropertiesTranscodeVideoStatus
     */
    public function getThumbnailJobStatus()
    {
        return $this->container['thumbnail_job_status'];
    }

    /**
     * Sets thumbnail_job_status
     * @param \Swagger\Client\Model\ContentPropertiesTranscodeVideoStatus $thumbnail_job_status
     * @return $this
     */
    public function setThumbnailJobStatus($thumbnail_job_status)
    {
        $this->container['thumbnail_job_status'] = $thumbnail_job_status;

        return $this;
    }

    /**
     * Gets display_thumbnail
     * @return bool
     */
    public function getDisplayThumbnail()
    {
        return $this->container['display_thumbnail'];
    }

    /**
     * Sets display_thumbnail
     * @param bool $display_thumbnail
     * @return $this
     */
    public function setDisplayThumbnail($display_thumbnail)
    {
        $this->container['display_thumbnail'] = $display_thumbnail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
