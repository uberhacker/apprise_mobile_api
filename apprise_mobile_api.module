<?php

/**
 * @file
 * An interface to the API for APPrise Mobile Clients.
 */

/**
 * Define constants.
 */

// Set the API version.
define('APPRISE_MOBILE_API_VERSION', '2.0.0');

// Set the path to the API.
define('APPRISE_MOBILE_API_PATH', drupal_get_path('module', 'apprise_mobile_api') . '/SwaggerClient-php');

// Define the language.
define('LANGUAGE_NONE', \Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED);

// For PHP < 5.5.  See http://php.net/manual/en/function.curl-file-create.php.
if (!function_exists('curl_file_create')) {
  /**
   * Define function curl_file_create().
   */
  function curl_file_create($filename, $mimetype = '', $postname = '') {
    return "@$filename;filename=" . ($postname ?: basename($filename)) . ($mimetype ? ";type=$mimetype" : '');
  }
}

/**
 * Implements hook_cron().
 */
function apprise_mobile_api_cron() {
  $variables = apprise_mobile_api_get_variables();

  $backtrace = debug_backtrace();
  $called_by = $backtrace[1]['function'];
  $run = (($called_by == 'apprise_mobile_api_settings_form_submit') && $variables['execute']);

  if (!$run) {
    $cron = $variables['cron'];
    switch ($cron) {
      case 1:
        $run = TRUE;
        break;

      case 2:
        // Only run cron between 12:00 and 1:00 AM.
        // This works only if cron runs hourly or
        // within this time frame (recommended).
        $run = !format_date(time(), 'custom', 'G');
    }
  }

  if ($run) {
    try {
      // Retrieve all relevant bundles.
      $bundles = array();
      foreach ($variables['types'] as $type => $value) {
        if ($value) {
          $bundles[] = $type;
        }
      }

      // Check for content that was added since 'apprise_mobile_api_days' ago.
      $days_ago = '-' . $variables['days'] . ' day';
      $time = strtotime($days_ago);
      foreach ($bundles as $bundle) {
        // Check for all relevant bundle content that was added since 'apprise_mobile_api_days' ago.
        $rows = db_query("SELECT nid FROM {node} WHERE type = :bundle AND created >= :time", array(
          ':bundle' => $bundle,
          ':time' => $time,
        ));
        foreach ($rows as $row) {
          apprise_mobile_api_push($row->nid);
        }
      }
    }
    catch (Exception $e) {
      $msg = 'Exception when calling apprise_mobile_api_post: ' . $e->getMessage();
      if ($variables['logging']->get('error_level') != 'hidden') {
        drupal_set_message($msg, 'error');
      }
      $variables['logger']->error($msg, array());
    }
  }
}

/**
 * Get content via an API request.
 */
function apprise_mobile_api_get($call = 'contents') {
  $content = array();
  $variables = apprise_mobile_api_get_variables();

  try {
    // Build the request URL.
    $base_url = $variables['base_url'];
    $params = array(
      'limit' => $variables['limit'],
      'offset' => $variables['offset'],
      'code' => $variables['key'],
    );
    $url = $base_url . '/' . $call . '?' . http_build_query($params);

    // Send the request.
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_ENCODING, '');
    curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
    //curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');
    $json_response = curl_exec($ch);

    if ($results = json_decode($json_response)) {
      // Build array from results.
      foreach ($results as $result) {
        $content[$result->_id] = isset($result->title) ? $result->title : $result->name;
      }
    }

    // Debug messages.
    if ($variables['debug']) {
      $msg = 'Request: ' . $url;
      if ($variables['logging']->get('error_level') != 'hidden') {
        drupal_set_message($msg, 'error');
      }
      $variables['logger']->notice($msg, []);

      $msg = 'Response: ' . print_r($results, TRUE);
      if ($variables['logging']->get('error_level') != 'hidden') {
        drupal_set_message($msg, 'error');
      }
      $variables['logger']->notice($msg, []);
    }
  }
  catch (Exception $e) {
    $msg = 'Exception when processing the request: ' . $e->getMessage();
    if ($variables['logging']->get('error_level') != 'hidden') {
      drupal_set_message($msg, 'error');
    }
    $variables['logger']->error($msg, array());
  }

  return $content;
}

/**
 * Post content via an API request.
 */
function apprise_mobile_api_post($call = 'contents', $values = array()) {
  $variables = apprise_mobile_api_get_variables();

  try {
    // Build the request URL.
    $base_url = $variables['base_url'];
    $code = $variables['key'];
    $url = $base_url . '/' . $call;
    if (isset($values['id'])) {
      $url .= '/' . $values['id'] . '/thumbnail';
    }
    $url .= '?code=' . $code;
    $headers = array('content-type: multipart/form-data');
    $query_values =  http_build_query($values);

    // Post the request.
    $msg = '';
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $query_values);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_ENCODING, '');
    curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
    //curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');
    $json_response = curl_exec($ch);

    if ($response = json_decode($json_response)) {
      if (isset($response->originalResponse)) {
        $response = json_decode($response->originalResponse);
        $msg = $response->code . ': ' . $response->message;
      }
      elseif (isset($response->results->errors)) {
        $errors = array();
        // Build errors array from results.
        foreach ($response->results->errors as $error) {
          $errors[] = $error->code . ': ' . $error->message;
        }
        $msg = implode(', ', $errors);
      }
      else {
        $msg = print_r($response, TRUE);
      }
    }
    curl_close($ch);

    // Response message.
    if ($variables['logging']->get('error_level') != 'hidden') {
      drupal_set_message($msg, 'error');
    }
    $variables['logger']->notice($msg, []);

    // Debug messages.
    if ($variables['debug']) {
      $msg = 'Request: ' . $url;
      if ($variables['logging']->get('error_level') != 'hidden') {
        drupal_set_message($msg, 'error');
      }
      $variables['logger']->notice($msg, []);

      $msg = 'Request: ' . urldecode($query_values);
      //$msg = 'Request: ' . print_r($values, TRUE);
      if ($variables['logging']->get('error_level') != 'hidden') {
        drupal_set_message($msg, 'error');
      }
      $variables['logger']->notice($msg, []);

      $msg = 'Response: ' . print_r($json_response, TRUE);
      if ($variables['logging']->get('error_level') != 'hidden') {
        drupal_set_message($msg, 'error');
      }
      $variables['logger']->notice($msg, []);
    }

    // Get the content id.
    $id = isset($response->_id) ? $response->_id : 0;
  }
  catch (Exception $e) {
    $id = 0;
    $msg = 'Exception when processing the request: ' . $e->getMessage();
    if ($variables['logging']->get('error_level') != 'hidden') {
      drupal_set_message($msg, 'error');
    }
    $variables['logger']->error($msg, array());
  }
  return $id;
}

/**
 * Push content to APPrise.
 */
function apprise_mobile_api_push($nid = 0) {
  $node = node_load($nid);
  $variables = apprise_mobile_api_get_variables();

  // Only send if checked.
  if (!empty($node->field_apprise_mobile_api_send->getValue()[0]['value'])) {
    // Retrieve the content.
    $content = !empty($node->body->getValue()[0]['value']) ? check_markup($node->body->getValue()[0]['value'], $node->body->getValue()[0]['format']) : '';
    if ($content) {
      // Generate a curl compatible file.
      $filename = \Drupal::config('system.file')->get('path.temporary') . '/' . time() . '.html';
      $file = curl_file_create($filename, 'text/html');

      // Base64 encode images.
      preg_match_all('|<img.*src="(.*)".*>|U', $content, $matches);
      if (isset($matches[1])) {
        foreach ($matches[1] as $path) {
          $url = \Drupal\Core\Url::fromUri($path, array('absolute' => TRUE))->getUri();
          $type = pathinfo($path, PATHINFO_EXTENSION);
          $data = file_get_contents($url);
          $base64 = 'data:image/' . $type . ';base64,' . base64_encode($data);
          $content = str_replace($path, $base64, $content);
          // Remove non-printable characters.
          $content = preg_replace('/[^[:print:]]/', '', $content);
        }
      }

      // Write the content to file.
      if ($fp = fopen($filename, 'w')) {
        fwrite($fp, $content);
        fclose($fp);
      }

      // Generate values to pass to APPrise.
      $date_format = 'Y-m-d\TH:i:s';
      $publish_date = format_date($node->created->getValue()[0]['value'], 'custom', $date_format, 'UTC');
      $web_url = NULL;
      $share = $node->field_apprise_mobile_api_share->getValue()[0]['value'];
      $timezone = date_default_timezone_get();
      date_default_timezone_set('UTC');
      $post_date = NULL;
      $unpost_date = NULL;
      if (isset($node->field_apprise_mobile_api_post->getValue()[0]['value'])) {
        $post_date = format_date(strtotime($node->field_apprise_mobile_api_post->getValue()[0]['value']), 'custom', $date_format);
      }
      if (isset($node->field_apprise_mobile_api_unpost->getValue()[0]['value'])) {
        $unpost_date = format_date(strtotime($node->field_apprise_mobile_api_unpost->getValue()[0]['value']), 'custom', $date_format);
      }
      date_default_timezone_set($timezone);
      $notes_enabled = 'false';
      $notify = 'true';
      $secure = 'false';
      $include_in_feed = 'true';
      $display_thumbnail = 'true';
      $content_folder = $node->field_apprise_mobile_api_folder->getValue()[0]['value'];
      $access_groups = $node->field_apprise_mobile_api_group->getValue()[0]['value'];
      $integration_id = NULL;
      $integration_type = NULL;
      $values = array(
        'title' => $node->title,
        'file' => $file,
        'publishDate' => $publish_date,
        'webUrl' => $web_url,
        'share' => $share,
        'postDate' => $post_date,
        'unpostDate' => $unpost_date,
        'notesEnabled' => $notes_enabled,
        'notify' => $notify,
        'secure' => $secure,
        'includeInFeed' => $include_in_feed,
        'displayThumbnail' => $display_thumbnail,
        'contentFolder' => $content_folder,
        'accessGroups' => $access_groups,
        'integrationId' => $integration_id,
        'integrationType' => $integration_type,
      );

      // Post the body content request.
      $id = apprise_mobile_api_post('contents', $values);

      // Remove temporary file.
      unlink($filename);

      // Post the thumbnail request.
      $field = $variables['field'];
      if (empty($node->{"$field"})) {
        $msg = t('Field :field does not exist in the :type content type.', array(
          ':field' => $field,
          ':type' => $node->type,
        ));
        if ($variables['logging']->get('error_level') != 'hidden') {
          drupal_set_message($msg, 'error');
        }
        $variables['logger']->error($msg, array());
      }
      if ($id && !empty($node->{"$field"})) {
        $styles = array();
        foreach (image_styles() as $name => $value) {
          $styles[] = $name;
        }
        $style = $variables['style'];
        // Check if the image style is available.
        if (in_array($style, $styles)) {
          // Generate a curl compatible file.
          $image_style = image_style_load($style);
          $uri = $node->{"$field"}->getValue()[0]['uri'];
          $image = image_style_path($style, $uri);
          image_style_create_derivative($image_style, $uri, $image);
          $filename = \Drupal::service("file_system")->realpath($image);
          if (file_exists($filename)) {
            $mimetype = file_get_mimetype($image);
            $file = curl_file_create($filename, $mimetype);
          }
          else {
            $msg = t('Thumbnail file :image not found.', array(':image' => $image));
            if ($variables['logging']->get('error_level') != 'hidden') {
              drupal_set_message($msg, 'error');
            }
            $variables['logger']->error($msg, array());
          }

          $values = array(
            'id' => $id,
            'file' => $file,
          );
          apprise_mobile_api_post('contents', $values);
        }
        else {
          $msg = t('Image style :style is not available.', array(':style' => $style));
          if ($variables['logging']->get('error_level') != 'hidden') {
            drupal_set_message($msg, 'error');
          }
          $variables['logger']->error($msg, array());
        }
      }
    }
  }
}

/**
 * Get variables.
 */
function apprise_mobile_api_get_variables() {
  $config = \Drupal::config('apprise_mobile_api.settings');
  $host = $config->get('apprise_mobile_api_host');
  $parsed_url = parse_url($host);
  if (!empty($parsed_url['host']) and !defined('APPRISE_MOBILE_API_HOST')) {
    define('APPRISE_MOBILE_API_HOST', $host);
  }
  $base_url = $host . '/v' . (int) APPRISE_MOBILE_API_VERSION;
  if ($mode = $config->get('apprise_mobile_api_mode')) {
    $key = $config->get('apprise_mobile_api_prod_key');
    $prefix = $config->get('apprise_mobile_api_prod_prefix');
  }
  else {
    $key = $config->get('apprise_mobile_api_test_key');
    $prefix = $config->get('apprise_mobile_api_test_prefix');
  }
  $cron = $config->get('apprise_mobile_api_cron');
  $days = $config->get('apprise_mobile_api_days');
  $debug = $config->get('apprise_mobile_api_debug');
  $execute = $config->get('apprise_mobile_api_execute');
  $field = $config->get('apprise_mobile_api_image_field');
  $style = $config->get('apprise_mobile_api_image_style');
  $limit = $config->get('apprise_mobile_api_limit');
  $offset = $config->get('apprise_mobile_api_offset');
  $logging = \Drupal::config('file.logging');
  $logger = \Drupal::logger('apprise_mobile_api');
  $types = $config->get('types');
  return array(
    'base_url' => $base_url,
    'cron' => $cron,
    'days' => $days,
    'debug' => $debug,
    'execute' => $execute,
    'field' => $field,
    'host' => $host,
    'key' => $key,
    'limit' => $limit,
    'logger' => $logger,
    'logging' => $logging,
    'mode' => $mode,
    'offset' => $offset,
    'prefix' => $prefix,
    'style' => $style,
    'types' => $types,
  );
}

/**
 * Implements hook_form_alter().
 */
function apprise_mobile_api_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
  if (isset($form['field_apprise_mobile_api_post']) &&
    isset($form['field_apprise_mobile_api_unpost'])) {
    // Add jQuery code to default the Unpost date.
    /*
    $form['#attached']['js'][] = array(
      'data' => drupal_get_path('module', 'apprise_mobile_api') . '/apprise_mobile_api.js',
      'type' => 'file',
    );
    */
    // Set default dates if adding a new node.
    if (empty($form['nid']['#value'])) {
      $date_format = 'm/d/Y H:i';
      $timezone = date_default_timezone_get();
      date_default_timezone_set('UTC');
      $today = format_date(strtotime('now'), 'custom', $date_format);
      $plus15days = format_date(strtotime('+15 day'), 'custom', $date_format);
      date_default_timezone_set($timezone);
      $form['field_apprise_mobile_api_post'][LANGUAGE_NONE][0]['#default_value']['value'] = $today;
      $form['field_apprise_mobile_api_post'][LANGUAGE_NONE][0]['#default_value']['value2'] = $today;
      $form['field_apprise_mobile_api_post'][LANGUAGE_NONE][0]['#date_items']['value'] = $today;
      $form['field_apprise_mobile_api_post'][LANGUAGE_NONE][0]['#date_items']['value2'] = $today;
      $form['field_apprise_mobile_api_unpost'][LANGUAGE_NONE][0]['#default_value']['value'] = $plus15days;
      $form['field_apprise_mobile_api_unpost'][LANGUAGE_NONE][0]['#default_value']['value2'] = $plus15days;
      $form['field_apprise_mobile_api_unpost'][LANGUAGE_NONE][0]['#date_items']['value'] = $plus15days;
      $form['field_apprise_mobile_api_unpost'][LANGUAGE_NONE][0]['#date_items']['value2'] = $plus15days;
    }
    // Add submit function to push content immediately.
    $form['actions']['submit']['#submit'][] = 'apprise_mobile_api_node_edit_form_submit';
  }
}

/**
 * Node edit form submit callback.
 */
function apprise_mobile_api_node_edit_form_submit(&$form, &$form_state) {
  if ($form_state->getValue('field_apprise_mobile_api_send') !== NULL &&
    $form_state->getValue('field_apprise_mobile_api_push') !== NULL) {
    apprise_mobile_api_push($form_state->getValue('nid'));
  }
}

/**
 * Submit callback for the API settings form.
 */
function apprise_mobile_api_settings_form_submit(&$form, &$form_state) {

  // Field definitions.
  $fields = array(
    'Send to APPrise' => array(
      'field_name' => 'field_apprise_mobile_api_send',
      'entity_type' => 'node',
      'type' => 'boolean',
      'settings' => array(
        'allowed_values' => array(
          0 => '',
          1 => '',
        ),
      ),
    ),
    'Push immediately' => array(
      'field_name' => 'field_apprise_mobile_api_push',
      'entity_type' => 'node',
      'type' => 'boolean',
      'settings' => array(
        'allowed_values' => array(
          0 => '',
          1 => '',
        ),
      ),
    ),
    'Destination folder' => array(
      'field_name' => 'field_apprise_mobile_api_folder',
      'entity_type' => 'node',
      'type' => 'text',
      'settings' => array(
        'allowed_values' => apprise_mobile_api_get('content-folders'),
      ),
    ),
    'Access group' => array(
      'field_name' => 'field_apprise_mobile_api_group',
      'entity_type' => 'node',
      'type' => 'text',
      'settings' => array(
        'allowed_values' => apprise_mobile_api_get('groups'),
      ),
    ),
    'Share' => array(
      'field_name' => 'field_apprise_mobile_api_share',
      'entity_type' => 'node',
      'type' => 'text',
      'settings' => array(
        'allowed_values' => array(
          'SHARE_DISABLED' => 'Disabled',
          'SHARE_ENABLED' => 'Enabled',
          'SHARE_EMAIL_ONLY' => 'Email Only',
        ),
      ),
    ),
    'Post date' => array(
      'field_name' => 'field_apprise_mobile_api_post',
      'entity_type' => 'node',
      'type' => 'datetime',
      'settings' => array(
        'granularity' => array('year', 'month', 'day', 'hour', 'minute'),
        'tz_handling' => 'site',
        'timezone_db' => date_default_timezone_get(),
        'repeat' => 0,
        'todate' => FALSE,
      ),
    ),
    'Unpost date' => array(
      'field_name' => 'field_apprise_mobile_api_unpost',
      'entity_type' => 'node',
      'type' => 'datetime',
      'settings' => array(
        'granularity' => array('year', 'month', 'day', 'hour', 'minute'),
        'tz_handling' => 'site',
        'timezone_db' => date_default_timezone_get(),
        'repeat' => 0,
        'todate' => FALSE,
      ),
    ),
  );

  // Bundles to include fields.
  $types = $form_state->getValue('apprise_mobile_api_types');
  $bundles = array();
  foreach ($types as $type => $value) {
    if ($value) {
      $bundles[] = $type;
    }
  }

  // Add fields to bundles.
  if (!empty($bundles)) {
    foreach ($fields as $label => $field) {
      // Check if our field is not already created.
      if (!\Drupal\field\Entity\FieldStorageConfig::loadByName('node', $field['field_name'])) {
				// Create the field storage.
				$field_storage = \Drupal\field\Entity\FieldStorageConfig::create($field);
				$field_storage->save();
      }
      foreach ($bundles as $bundle) {
        // Check if our field is not already attached to the content type.
        if (!\Drupal\field\Entity\FieldConfig::loadByName('node', $bundle, $field['field_name'])) {
          // Create the field instance on the bundle.
          $instance = array(
            'field_name' => $field['field_name'],
            'entity_type' => 'node',
            'label' => $label,
            'bundle' => $bundle,
            'settings' => array(
              $bundle . '_node_form' => 1,
            ),
            'widget' => array(
              'type' => $field['type'],
            ),
          );
          $instance['display']['default']['type'] = 'hidden';
          $instance['display']['teaser']['type'] = 'hidden';
          if ($field['type'] == 'boolean') {
            $instance['widget']['type'] = 'options_onoff';
          }
          if ($field['type'] == 'text') {
            $instance['widget']['type'] = 'options_select';
            $instance['required'] = TRUE;
          }
          if ($field['type'] == 'datetime') {
            $instance['widget']['type'] = 'date_popup';
          }
          $instance['widget']['settings']['display_label'] = 1;
          if ($instance['label'] == 'Share') {
            $instance['default_value'] = array(array('value' => 'SHARE_DISABLED'));
          }
				  $field = \Drupal\field\Entity\FieldConfig::create($instance);
				  $field->save();
          // Enable the field on the form display.
          $node_bundle = 'node.' . $bundle . '.default';
          $form_display = \Drupal::entityTypeManager()->getStorage('entity_form_display');
          if (!$form_display->load($node_bundle)) {
            $form_display->create([
              'target_entity_type' => 'node',
              'bundle' => $bundle,
						  'mode' => 'default',
						  'status' => TRUE,
						])->save();
            $form_display->load($node_bundle);
          }
          /*
          $form_display->setComponent($field['field_name'], [
            'type' => $field['type'],
            'label' => 'above',
            'settings' => ['display_label' => TRUE],
          ])->save();
          */
        }
      }
    }
  }

  // Bundles to remove fields.
  $previous_types = $form_state->getValue('apprise_mobile_api_previous_types');
  $bundles_to_remove = array();
  foreach ($previous_types as $type => $value) {
    if ($value and !in_array($type, $bundles)) {
      $bundles_to_remove[] = $type;
    }
  }

  // Remove fields from bundles.
  if (!empty($bundles_to_remove)) {
    foreach ($fields as $label => $field) {
      foreach ($bundles_to_remove as $bundle) {
        if (\Drupal\field\Entity\FieldConfig::loadByName('node', $bundle, $field['field_name'])) {
          \Drupal\field\Entity\FieldConfig::loadByName('node', $bundle, $field['field_name'])->delete();
        }
      }
    }
  }

  // Run to execute a request.
  apprise_mobile_api_cron();
}
